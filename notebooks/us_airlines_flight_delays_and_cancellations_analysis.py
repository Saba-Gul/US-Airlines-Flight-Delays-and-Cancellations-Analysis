# -*- coding: utf-8 -*-
"""US Airlines Flight Delays and Cancellations Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rHZKp_sM5EiaiR0mhXFeHE77ogzUter1

## **Import Libraries**
"""

!pip install ydata_profiling

import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
#from ydata_profiling import ProfileReport
from sklearn.preprocessing import OneHotEncoder, StandardScaler
import pandas as pd
import numpy as np

import plotly.express as px
from wordcloud import WordCloud, STOPWORDS

airlines = pd.read_csv("/content/airlines.csv")

airlines.head()

stopwords = set(STOPWORDS)

wordcloud = (WordCloud(width=500, height=300, relative_scaling=0.5, stopwords=stopwords).generate_from_frequencies(airlines['AIRLINE'].value_counts().head(35)))
fig = plt.figure(1,figsize=(15, 15))
plt.imshow(wordcloud)
plt.axis('off')
plt.show()

airlines.columns

airlines.shape

airlines.info()

airports = pd.read_csv("/content/airports.csv")

airports.head(30)

airports.columns

airports.shape

airports.info()

flights = pd.read_csv("/content/flights.csv")

flights.head()

flights.columns

flights.shape

flights.info()

"""## Merge Airlines and flights data"""

airlines = airlines.rename(columns={'AIRLINE': 'AL_FULLNAME', 'IATA_CODE': 'AIRLINE'})

#convert column names to lowercase
flights.columns = flights.columns.str.lower()
airlines.columns = airlines.columns.str.lower()
airports.columns = airports.columns.str.lower()

flights.columns

airlines.columns

# merge airlines and flights data to get full names of airlines
flights_merged = flights.merge(airlines, how = 'left', on = 'airline')

flights_merged.head()

flights_merged.columns

"""## Merge flights_merged and Airport Data"""

#merge origin airport data onto main df
merged_df = pd.merge(flights_merged, airports, left_on='origin_airport', right_on='iata_code', how='left')
merged_df.rename(columns={'airport': 'origin_airport_name', 'city': 'origin_city', 'state': 'origin_state', 'country': 'origin_country', 'latitude': 'origin_latitude', 'longitude': 'origin_longitude'}, inplace=True)
merged_df.drop('iata_code', axis=1, inplace=True)

merged_df.head()

merged_df.columns

# merge destination airport data onto main df
merged_df = pd.merge(merged_df, airports, left_on='destination_airport', right_on='iata_code', how='left')
merged_df.rename(columns={'airport': 'destination_airport_name', 'city': 'destination_city', 'state': 'destination_state', 'country': 'destination_country', 'latitude': 'destination_latitude', 'longitude': 'destination_longitude'}, inplace=True)

merged_df.head()

merged_df.drop('iata_code', axis=1, inplace=True)

df = merged_df

df.head()

"""## Analysing Data Inconsistencies"""

#get info on columns types and number of null and unique values

df_dtypes = pd.DataFrame(df.dtypes, columns = ['dtypes'])
null_count = df.isnull().sum().rename('null values')
null_pct = (df.isnull().sum() / df.shape[0] * 100).rename('null percent')
df_unique = df.nunique(axis=0).rename('unique vals')

result = pd.concat([df_dtypes, null_count, null_pct, df_unique], axis=1).T
result

# Generate the profile report
#report = ProfileReport(df)

# Save the report to a file
#report.to_file("data_profile_report.html")

# Alternatively, you can also display the report directly
#report.to_notebook_iframe()

#drop columns with little variability/not useful in prediciton/visualization or redundant
df = df.drop(columns = ['flight_number', 'tail_number', 'taxi_out',
                   'wheels_off', 'air_time', 'taxi_in', 'diverted',
                  'cancellation_reason', 'air_system_delay', 'security_delay',
                   'airline_delay', 'late_aircraft_delay', 'weather_delay', 'origin_country', 'destination_country'])

df.head()

#create "date", "week_number", "sched_hour", and "dow_name" columns
df['date'] = pd.to_datetime(df[['year','month', 'day']])
df['week_number'] = df['date'].dt.strftime('%U')
df['dow_name'] = df['date'].dt.strftime('%A')


#function that assigns season based on month. May be useful for visualization
def season_cat(x):
    if x in [12,1,2]:
        return 'winter'
    elif x in [3,4,5]:
        return 'spring'
    elif x in [6,7,8]:
        return 'summer'
    return 'autumn'

#create season type column and count # of short/med/long flights
df['season'] = df['month'].apply(season_cat)

df = df.drop(columns = 'year')

#check if there are airports in flights that are not in airports.'set' creates unique list of things
unmatched_origin_airports = set(df['origin_airport']) - set(airports['iata_code'])
unmatched_destination_airports = set(df['destination_airport']) - set(airports['iata_code'])
len(unmatched_origin_airports)

#remove observations where airport is an integer
import re
import pandas as pd

# Check if 'origin_airport' or 'destination_airport' can be converted to numeric values
is_numeric = pd.to_numeric(df['origin_airport'], errors='coerce').notna() | pd.to_numeric(df['destination_airport'], errors='coerce').notna()

# Drop the rows where either 'origin_airport' or 'destination_airport' contains integer values
df = df[~is_numeric]

df.head(10)

"""Below we write a script to transform the arrival and departure times from continuous floats to time objects e.g. 1730 --> 17:30"""

from datetime import datetime

# write a function to convert float time to string time format
def convert_float_time(float_time):
    time_string = str(float_time).split('.')[0].zfill(4) # ensure 4 characters

    try:
        hour = int(time_string[:-2]) #first two will be the hour
        minute = int(time_string[-2:]) #last will be minutes

        if hour >= 24:
            hour = hour % 24

        return f"{hour:02d}:{minute:02d}:00"
    except ValueError: #return none where there are null values
        return None

# Apply the conversion function to the arrival_time column
df['arrival_time'] = df['arrival_time'].apply(convert_float_time)
df['departure_time'] = df['departure_time'].apply(convert_float_time)
df['scheduled_departure'] = df['scheduled_departure'].apply(convert_float_time)

# Combine date and scheduled departure columns into a single datetime column
df['scheduled_departure_datetime'] = pd.to_datetime(df['date'].astype(str) + ' ' + df['scheduled_departure'])

#get hour from the scheduled departure time
df['sched_hour'] = df['scheduled_departure_datetime'].dt.strftime('%H')

df.head(10)

"""## Exploratory Data Analysis"""

#get the count of all unqiue airlines
airline_counts = df['al_fullname'].value_counts().sort_values(ascending=False)

# Create a bar chart using seaborn
plt.figure(figsize=(6, 4))
sns.color_palette("colorblind")
plt.title("Count of Flights by Airline")
sns.barplot(x=airline_counts.values, y=airline_counts.index,palette="colorblind")
plt.xlabel("Count")
plt.ylabel("Airline")
plt.show()

"""Spothwest Airlines Co. seems like the most popular choice based on number of flights followed by Delta Airlines Inc. Virgin America seems to have the least number of flights taken in 2015."""

#calculate total distance, and plot
airline_sum_distance = df.groupby('al_fullname')['distance'].sum().sort_values(ascending=False)
# Create a bar plot using seaborn
plt.figure(figsize=(6,4))
sns.barplot(x=airline_sum_distance.values, y=airline_sum_distance.index, palette="colorblind")
plt.title("Total Sum of Distance Flown by Airline")
plt.xlabel("Total Distance")
plt.ylabel("Airline")
plt.show()

"""According to the length of distance travelled, Spothwest Airlines Co., Delta Air lines Inc. and  United Air lines Inc. have flown over the longest distances in 2015. Hawaiian Airlines Inc. have covered the least distance in the same year."""

df['distance'].plot(kind = 'hist', color='lightgreen')

"""According to the above histogram, the max flights taken had covered a distanve less than 1000 miles. Let's create a categorical variable to understand each airline's relationship with distance."""

# function that assigns 'short' 'medium' or 'long' based on distance

def dist_cat(x):
    if x < 1000:
        return 'short'
    elif 1000 <= x <= 2000:
        return 'medium'
    return 'long'

# create dist type column and count # of short/med/long flights

df['dist_type'] = df['distance'].apply(dist_cat)
df['dist_type'].value_counts()

plt.figure(figsize=(20, 10))
sns.countplot(data=df, y ='al_fullname',hue='dist_type',palette="rocket")

"""We observe that most of the flights of Southwest Airlines are short range (less than 100 miles). Infact among all the airlines, short range travel is the most popular, followed by medium and then long distance.

### In terms of delays, how does each airline perform?
"""

plt.figure(figsize=(10, 6))
sns.stripplot(y="al_fullname", x="departure_delay", data=df, linewidth = 0.5,  jitter=True, color='red')
plt.title("Departure Delay by Airline")
plt.xlabel("Departure Delay")
plt.ylabel("Airline")
plt.show()

fig = plt.figure(1, figsize=(11,6))
ax = sns.barplot(x="departure_delay", y="al_fullname", data=df, color="lightskyblue", ci=None)
ax = sns.barplot(x="arrival_delay", y="al_fullname", data=df, hatch = '+++', alpha = 0.0, ci=None)
plt.xlabel('Average Delay [@Departure: blue, @Arrival: hatch lines]')

df.groupby(['al_fullname'])['departure_delay'].mean().sort_values(ascending = False).reset_index()

"""In the bar plot above we're taking the average departure delay in light blue and imposing average arrival delay hatch lines to observe the net delay.

- American Eagle Airlines Inc. has the largest departure and arrival delay followed by Frontier Airlines Inc.
- Virgin America has the least departure delay and arrives earliered than the scheduled time.

"""

df.groupby(['destination_city'])['arrival_delay'].mean().sort_values().nlargest(10)

plt.figure(figsize=(10, 6))
df.groupby(['destination_city'])['arrival_delay'].mean().sort_values(ascending = False).plot()
plt.title('Arrival Delay by City, 2015')
plt.xlabel('City')
plt.ylabel('Arrival Delay')

df.groupby(['origin_city'])['departure_delay'].mean().sort_values().nlargest(10)

plt.figure(figsize=(10, 6))
df.groupby(['origin_city'])['departure_delay'].mean().sort_values(ascending = False).plot()
plt.title('Departure Delay by City, 2015')
plt.xlabel('City')
plt.ylabel('Departure Delay')

df.groupby(['destination_state'])['arrival_delay'].mean().sort_values().nlargest(10)

plt.figure(figsize=(10, 6))
df.groupby(['destination_state'])['arrival_delay'].mean().sort_values(ascending = False).plot()
plt.title('Arrival Delay by State, 2015')
plt.xlabel('State')
plt.ylabel('Arrival Delay')

df.groupby(['origin_state'])['departure_delay'].mean().sort_values().nlargest(10)

plt.figure(figsize=(10, 6))
df.groupby(['origin_state'])['departure_delay'].mean().sort_values(ascending = False).plot()
plt.title('Departure Delay by State, 2015')
plt.xlabel('State')
plt.ylabel('Departure Delay')

#arrival + departure delays by airport
df['late_arrival'] = [1 if x >= 15 else 0 for x in df['arrival_delay']]
df['late_departure'] = [1 if x >= 15 else 0 for x in df['departure_delay']]

# Top 10 destination airports with the largest average number of flights delayed
df.groupby('destination_airport')['late_arrival'].mean().sort_values().nlargest(10)

# Top 10 origin airports with the largest average number of flights delayed
df.groupby('origin_airport')['late_departure'].mean().sort_values().nlargest(10)

"""### Change in airline performance change over the months of the year"""

#calculate the percentage of on-time flights by month. (I assume on time to be no more than 15 minutes late)
on_time_performance = df.groupby(['al_fullname', 'week_number'])[['arrival_delay']].apply(lambda x: ((x <= 15).sum() / len(x)) * 100)
on_time_performance = on_time_performance.reset_index()

#subset the top 5 airlines
top_5 = df.groupby('al_fullname')['distance'].sum().sort_values(ascending = False).head(5)
top_5 = pd.DataFrame(top_5)

on_time_performance = on_time_performance[on_time_performance.al_fullname.isin(top_5.index)]

#reshape the data for plotting
pivot_table = on_time_performance.pivot(index='week_number', columns='al_fullname', values='arrival_delay')

#line plot of on-time performance by month
pivot_table.plot(kind='line', figsize=(10, 6))
plt.title('Top 5 Airline OTP, 2015')
plt.xlabel('Week')
plt.ylabel('Percentage of On-Time Flights')
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.xticks(range(1, 5))
plt.grid(True)
plt.show()

# calculate average and standard deviation of arrival delay
df.groupby(['al_fullname'])['arrival_delay'].agg(['mean','std']).reset_index()

""" ### Which routes have the highest probability of being canceled?"""

df['cancelled'].value_counts(normalize=True) * 100

"""For all observations, it looks like the average cancellation rate is around 1.6 %"""

sns.countplot(x='cancelled', data = df)
plt.show()

"""### Cancellation rate by Airline"""

df.groupby(['al_fullname'])['cancelled'].mean().sort_values(ascending = False).reset_index()

"""- Is there a specific time of day and/or time of year with a greater cancellation rate?
- Which routes have the greatest cancellation rate?
"""

# group origin-destination pairs as 'route'
df['route'] = df['origin_airport'] + '-' + df['destination_airport']

df.groupby(['route'])['cancelled'].count().sort_values(ascending = False).reset_index()

df.head()

plt.figure(figsize=(10, 6))
df.groupby(['date'])['cancelled'].sum().sort_values(ascending = False).plot()
plt.title('Cancellation Count, 2015')
plt.xlabel('Date')
plt.ylabel('Cancellation Count')

df['month'].nunique()

df.groupby('month')['cancelled'].sum()

"""We have data of 2 months only which isnt enough to decipher the trends"""

# Count number of cancellations and flights for each airline
df_cancelled = df.groupby('al_fullname')['cancelled'].agg(['sum','count']).rename(columns = {'sum':'total_cancelled', 'count':'total_flights'})
df_cancelled['cancellation_rate'] = df_cancelled['total_cancelled']/df_cancelled['total_flights']


sns.lmplot(data = df_cancelled.reset_index().nlargest(7, 'total_flights'),
           x = 'total_flights', y = 'cancellation_rate', hue = 'al_fullname',
           fit_reg = False, aspect = 2)

"""- There is no correaltion between total flights taken and cancellation rate
- Airline size doesn't necessarily correlate with lower cancellation rates
"""

# get average cancellations by day of week
dow_canc = df.groupby(['dow_name'])['cancelled'].mean().reset_index().rename(columns={'cancelled': 'cancellation_mean'})
dow_canc['cancellation_mean'] = dow_canc['cancellation_mean']

# get count of flights by day of week
dow_count = df.groupby(['dow_name'])['cancelled'].count().reset_index().rename(columns={'cancelled': 'flight_count'})

# merge dataframes and print
canc_df = pd.merge(dow_canc, dow_count, on = 'dow_name')
canc_df.sort_values(by = 'flight_count')

df.groupby(['dow_name'])['cancelled'].sum().sort_values(ascending = False).plot()
plt.title('Cancellation Count wrt Day of the Week, 2015')
plt.xlabel('Day')
plt.ylabel('Cancellation Count')

"""From the table above we can see that in the aggregate Monday's have athe highest cancellation rate of 6.6%, while Friday how the lowest cancellation rate."""

df.groupby(['origin_airport'])['cancelled'].count().sort_values(ascending = False).reset_index()

df.groupby(['destination_airport'])['cancelled'].count().sort_values(ascending = False).reset_index()

"""### **US Airlines Flight Delays and Cancellations Analysis:**
1. Which airline had the highest percentage of delayed or cancelled flights in 2015?
- American Eagle Airlines Inc. has the largest departure and arrival delay followed by Frontier Airlines Inc.
- Atlantic Southeast Airlines have the highest cancellation rate while Delta Airlines Inc. have the lowest cancellation rate.

2. Which airports had the most flight cancellations?
- Hartsfield-Jackson Atlanta International Airport (ATL) had the maximum number of cancellations by origin and destination.
- Interms of route: LAX-JFK, JFK-LAX and SFO-LAX had maximum cancellations.

3. Are there any geographical patterns in flight delays? Do certain regions or airports experience more delays than others?
- Interms of States of US, Iowa and Delaware has the greatest arrival and departure delay respectively in 2015.
- While analysing the cities, Marquette (Wisconson) and Devils Lake (Wisconsin) have the highest arrival and departure delay respectively.

4. What was the average flight delay for each day of the week? Are weekends or weekdays more prone to delays?
- Monday's have the highest cancellation rate of 0.067, while Friday how the lowest cancellation rate.
- No trend is observed to correlate cancellations with weekends or weekdays.

## **American airline flights Cancellation Prediction**
"""

# subset df to include only american airline flights
al_df = df[(df['airline'] == 'AA')]

# removing columns where data isn't available(e.g. departure delay isn't known for cancelled flight)
relevant_cols = ['cancelled','month','day_of_week','distance','scheduled_time', 'route', 'sched_hour']
al_df = al_df[relevant_cols]

al_df.head()

# Encode day of week, route, hour, month
day_en = pd.get_dummies(al_df['day_of_week'], prefix = 'day')
route_en = pd.get_dummies(al_df['route'], prefix = 'route')
month_en = pd.get_dummies(al_df['month'], prefix = 'month')
hour_en = pd.get_dummies(al_df['sched_hour'], prefix = 'hour')


#concat dummy vars to dataframe
al_df = pd.concat([al_df, day_en, month_en, hour_en, route_en], axis = 1)
al_df = al_df.drop(columns = ['month','day_of_week', 'route', 'sched_hour'])

al_df.head()

#split data into features + target
X= al_df.drop('cancelled', axis=1)
y = al_df.cancelled

from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix

# split feature and target data into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=60)
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)

ax= plt.subplot()
sns.heatmap(confusion_matrix, annot=True, ax = ax, fmt = 'g');
ax.set_title('Confusion Matrix', fontsize=20)

ax.xaxis.set_ticklabels(['NOT CANCELLED', 'CANCELLED'], fontsize = 12)
ax.xaxis.tick_top()

ax.yaxis.set_ticklabels(['NOT CANCELLED', 'CANCELLED'], fontsize = 12)
plt.show()

print(classification_report(y_test, y_pred, target_names=["NOT CANCELLED", "CANCELLED"]))

"""Based on the results of your logistic regression model for predicting American airline flight cancellations, here's an interpretation of the performance metrics:

- **Precision**:
  - For the "NOT CANCELLED" class: 97% of the flights predicted as not cancelled were indeed not cancelled.
  - For the "CANCELLED" class: Only 85% of the flights predicted as cancelled were actually cancelled. This indicates a relatively high false positive rate.

- **Recall**:
  - For the "NOT CANCELLED" class: 100% of the actual not cancelled flights were correctly identified.
  - For the "CANCELLED" class: Only 3% of the actual cancelled flights were correctly identified. This indicates a low rate of true positives, meaning many cancelled flights were missed by the model.

- **F1-score**:
  - The F1-score is a balance between precision and recall. For the "CANCELLED" class, the low recall contributes to a very low F1-score, indicating poor performance in correctly identifying cancelled flights.

- **Accuracy**:
  - Overall accuracy of the model is 97%, which is high. However, given the class imbalance (with very few cancelled flights compared to not cancelled flights), accuracy alone may not be a reliable measure of model performance.

- **Macro Avg / Weighted Avg**:
  - The macro average and weighted average of precision, recall, and F1-score provide an overall summary of model performance across both classes. In this case, they indicate that the model's performance is significantly better for the "NOT CANCELLED" class compared to the "CANCELLED" class.

Based on these metrics, it's evident that while the model performs well in predicting not cancelled flights, it struggles to accurately identify cancelled flights. This could be due to the class imbalance, where there are far fewer examples of cancelled flights in the dataset compared to not cancelled flights. Further optimization of the model or exploration of different machine learning algorithms may be necessary to improve its performance, especially in correctly predicting flight cancellations. Additionally, considering techniques such as resampling or adjusting class weights could help address the class imbalance issue and potentially improve model performance.

Here are some key takeaways of the analysis:

1. **Airline Performance**:
   - American Eagle Airlines Inc. and Frontier Airlines Inc. had the highest percentage of delayed or cancelled flights.
   - Atlantic Southeast Airlines had the highest cancellation rate, while Delta Airlines Inc. had the lowest.

2. **Airport Analysis**:
   - Hartsfield-Jackson Atlanta International Airport (ATL) experienced the most flight cancellations, both by origin and destination.
   - Routes such as LAX-JFK, JFK-LAX, and SFO-LAX had the highest number of cancellations.

3. **Geographical Patterns**:
   - Certain states and cities, such as Iowa and Delaware, Marquette (Wisconsin), and Devils Lake (Wisconsin), experienced higher arrival and departure delays.
   - This highlights potential regional factors contributing to flight delays.

4. **Day of the Week Analysis**:
   - Monday had the highest cancellation rate, while Friday had the lowest.
   - There doesn't seem to be a clear trend correlating cancellations with weekends or weekdays, suggesting that other factors may influence flight cancellations.

Overall, your analysis provides a comprehensive overview of the factors contributing to flight delays and cancellations in 2015, highlighting areas for improvement in airline operations and airport management. Further exploration and analysis could involve investigating the reasons behind specific airline or airport performance, identifying potential solutions to minimize disruptions, and assessing the impact of external factors such as weather on flight operations.
"""